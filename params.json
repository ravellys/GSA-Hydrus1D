{"name":"Global-sensitivity-analysis-in-hydrus-1d","tagline":"Global Sensitivy Analyses with package SALib to evaluated the Hydrus-1D software simulation in vadose zone of the soil","body":"# Global Sensitivity Analysis (GSA) in the hydrodynamic parameters in the software Hydrus-1D\r\n\r\nEvaluate the sensitivity analysis in the hydrodynamics processes is essential to understand the parameters' influence in the Soil Water Content (SWC). This analysis allows the determination of hydrodynamic parameters with better accuracy. In this context, this project evaluated GSA in a robust Hydrus-1D model. For this, was used the Sobol Sensitivity Analysis (DOI:10.1016/S0378-4754(00)00270-6) presents in the SALib library. The objective function used was the NSE coefficient, which compared the measured and simulated SWC.\r\n\r\nThe data used in this work was provided by the flux tower of the project INCT-ONDACBC (Observatório Nacional da Dinâmica da Água e de Carbono no Bioma Caatinga), which is in a seasonal tropical dry forest (Caatinga) in the semi-arid region of Brazil (Serra Talhada - PE). Besides, TDR sensors evaluated the soil moisture for depths of 10, 20, 30, and 40 cm (http://dx.doi.org/10.17190/AMF/1562386).\r\n\r\nLocalization towers area:\r\n<img src = \"localiza%C3%A7%C3%A3o.png\">\r\n\r\n## Execute the routine:\r\n1. create a project in Hydrus-1D (BRCST_SA_30dias). \r\n2. crete a .txt with same content that SELECTOR.IN (selectortxt.txt).\r\n3. put this project paste and the executable H1D_calc.exe in local disk C:.\r\n4. create a file with mensured data (SA_30d_Hydrus).\r\n5. Execute the routine (GSA_hydrus.py)\r\n\r\n## How the routine works:\r\n\r\n### Libraries used\r\n\r\n```\r\nfrom SALib.sample import saltelli\r\nfrom SALib.analyze import sobol\r\nimport time, subprocess\r\nimport pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport hydroeval as hyev\r\n```\r\n\r\n### time of the days in Hydrus, Hydrus project, and import mensured data\r\n\r\n```\r\nndias=31\r\n\r\npasta = 'C:/BRGST_SA_30dias'\r\n\r\nfileDadosMedidos='SA_30d_Hydrus.xlsx'\r\nDadosMEDIDOS = pd.read_excel(fileDadosMedidos, header = 0)\r\nDadosMEDIDOS.head()\r\nEta = DadosMEDIDOS['ETa_BRGST'].values\r\nVreal = DadosMEDIDOS['Vol_BRGST'].values\r\n```\r\n\r\n### Create problem\r\n\r\nHere we will define the range of the parameters:\r\n```\r\nproblem = {\r\n    'num_vars': 6,\r\n    'names': ['thr', 'ths', 'alfa','n','Ks','l'],\r\n    'bounds': [[0.001, 0.05],\r\n               [0.2, 0.6],\r\n               [0.001, 1],\r\n               [1.1,3],\r\n               [10, 10000],\r\n               [-1, 1]]\r\n}\r\n```\r\n\r\n### Create the samples \r\n\r\nthe total simulations is calculed by: n_samples*(2*n_paramters+2)\r\n```\r\nnsamples = 3000\r\nparam_values = saltelli.sample(problem,nsamples)\r\n```\r\n\r\n### Execute all simulations\r\n\r\nHere we will execute the NSE function, and create a Y matrix with alls NSE coefficients.```\r\n```\r\nY = []\r\nSTART=time.time()\r\n\r\nfor i in range(len(param_values)): \r\n    nse = NSE(param_values[i],pasta,ndias,tempo,Vreal,Eta)\r\n    Y.append(nse)\r\n    print(i,*param_values[i],*Y[i])\r\n\r\nY = np.array(Y)\r\n\r\nprint('total time', str(time.time()-START))\r\n```\r\n\r\nThe NSE function performs the following steps:\r\n1. change hydrus project parameters\r\n2. execute hydrus\r\n3. import outputs in file TLEVEL.out\r\n4. calcule NSE coeficient with mensured and simulated data.\r\n\r\n```\r\ndef NSE(x,pasta,ndias,tempo,Vreal,Eta):\r\n    \r\n    mudaParametros(pasta,x)\r\n    rodar_Hydrus(pasta) \r\n\r\n    DATA = TLEVEL(pasta+'/T_Level.out',ndias)\r\n    if isinstance(DATA, pd.DataFrame):\r\n        Volume = DATA['Volume'].values\r\n        ETa = desCum(DATA['sum(vRoot)'].values + DATA['sum(Evap)'].values)\r\n    \r\n        NSEv = hyev.nse_c2m(Volume,Vreal)\r\n        NSEeta = hyev.nse_c2m(ETa,Eta)\r\n        return [NSEv,NSEeta]        \r\n \r\n    else:\r\n        return [-1,-1]\r\n```\r\n\r\n### finaly, we used the barplot function to make and plot the sensitives indices\r\n```\r\nvariaveis = df_Y.columns\r\nfor i in variaveis:\r\n    figura,Sensibilidade = barplot(df_Y[i])\r\n    figura.savefig(pasta + '/'+ estação+ i + '.png' ,dpi=300,bbox_inches='tight')\r\n    df_si = pd.DataFrame(Sensibilidade, columns = ['S1','ST'])\r\n    df_Y.to_excel(pasta + '/'+ estação+ i + '.xlsx',index = True,header = True)\r\n````\r\n\r\nbarplot function use the sobol.analyze to make the GSA:\r\n```\r\ndef barplot(df):\r\n    fig = plt.figure(figsize = (5,5))\r\n    y=df.values\r\n\r\n    Si = sobol.analyze(problem,y)\r\n\r\n    x=[r'$\\theta\\ _{r}$', r'$\\theta\\ _{s}$', r'$\\alpha\\ $','n','Ks','l']\r\n    X = np.arange(len(Si['S1']))\r\n\r\n    plt.bar(X + 0.00, Si['S1'],color = 'b', width = 0.25, label = r'$S_1$')\r\n    plt.bar(X + 0.25, Si['ST'],color = 'gray', width = 0.25, label = r'$S_T$')\r\n    plt.xticks(X+0.125,(x),fontsize = 14)\r\n    plt.yticks(fontsize = 14)\r\n    plt.title(df.name,fontsize = 14, family = 'serif') \r\n    plt.legend()\r\n    \r\n    return [fig,Si]\r\n```\r\n\r\n### Out: \r\n\r\n<img src = \"vol_GSA.png\">\r\n<img src = \"eta_GSA.png\">\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}